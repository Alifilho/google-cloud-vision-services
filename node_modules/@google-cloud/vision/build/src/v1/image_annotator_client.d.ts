import * as gax from 'google-gax';
import { Callback, ClientOptions, LROperation } from 'google-gax';
import * as protosTypes from '../../protos/protos';
/**
 *  Service that performs Google Cloud Vision API detection tasks over client
 *  images, such as face, landmark, logo, label, and text detection. The
 *  ImageAnnotator service returns detected entities from the images.
 * @class
 * @memberof v1
 */
export declare class ImageAnnotatorClient {
    private _descriptors;
    private _innerApiCalls;
    private _pathTemplates;
    private _terminated;
    private _opts;
    private _gaxModule;
    private _gaxGrpc;
    private _protos;
    private _defaults;
    auth: gax.GoogleAuth;
    operationsClient: gax.OperationsClient;
    imageAnnotatorStub?: Promise<{
        [name: string]: Function;
    }>;
    /**
     * Construct an instance of ImageAnnotatorClient.
     *
     * @param {object} [options] - The configuration object. See the subsequent
     *   parameters for more details.
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     */
    constructor(opts?: ClientOptions);
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize(): Promise<{
        [name: string]: Function;
    }>;
    /**
     * The DNS address for this API service.
     */
    static get servicePath(): string;
    /**
     * The DNS address for this API service - same as servicePath(),
     * exists for compatibility reasons.
     */
    static get apiEndpoint(): string;
    /**
     * The port for this API service.
     */
    static get port(): number;
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     */
    static get scopes(): string[];
    getProjectId(): Promise<string>;
    getProjectId(callback: Callback<string, undefined, undefined>): void;
    batchAnnotateImages(request: protosTypes.google.cloud.vision.v1.IBatchAnnotateImagesRequest, options?: gax.CallOptions): Promise<[protosTypes.google.cloud.vision.v1.IBatchAnnotateImagesResponse, (protosTypes.google.cloud.vision.v1.IBatchAnnotateImagesRequest | undefined), {} | undefined]>;
    batchAnnotateImages(request: protosTypes.google.cloud.vision.v1.IBatchAnnotateImagesRequest, options: gax.CallOptions, callback: Callback<protosTypes.google.cloud.vision.v1.IBatchAnnotateImagesResponse, protosTypes.google.cloud.vision.v1.IBatchAnnotateImagesRequest | undefined, {} | undefined>): void;
    batchAnnotateFiles(request: protosTypes.google.cloud.vision.v1.IBatchAnnotateFilesRequest, options?: gax.CallOptions): Promise<[protosTypes.google.cloud.vision.v1.IBatchAnnotateFilesResponse, protosTypes.google.cloud.vision.v1.IBatchAnnotateFilesRequest | undefined, {} | undefined]>;
    batchAnnotateFiles(request: protosTypes.google.cloud.vision.v1.IBatchAnnotateFilesRequest, options: gax.CallOptions, callback: Callback<protosTypes.google.cloud.vision.v1.IBatchAnnotateFilesResponse, protosTypes.google.cloud.vision.v1.IBatchAnnotateFilesRequest | undefined, {} | undefined>): void;
    asyncBatchAnnotateImages(request: protosTypes.google.cloud.vision.v1.IAsyncBatchAnnotateImagesRequest, options?: gax.CallOptions): Promise<[LROperation<protosTypes.google.cloud.vision.v1.IAsyncBatchAnnotateImagesResponse, protosTypes.google.cloud.vision.v1.IOperationMetadata>, protosTypes.google.longrunning.IOperation | undefined, {} | undefined]>;
    asyncBatchAnnotateImages(request: protosTypes.google.cloud.vision.v1.IAsyncBatchAnnotateImagesRequest, options: gax.CallOptions, callback: Callback<LROperation<protosTypes.google.cloud.vision.v1.IAsyncBatchAnnotateImagesResponse, protosTypes.google.cloud.vision.v1.IOperationMetadata>, protosTypes.google.longrunning.IOperation | undefined, {} | undefined>): void;
    asyncBatchAnnotateFiles(request: protosTypes.google.cloud.vision.v1.IAsyncBatchAnnotateFilesRequest, options?: gax.CallOptions): Promise<[LROperation<protosTypes.google.cloud.vision.v1.IAsyncBatchAnnotateFilesResponse, protosTypes.google.cloud.vision.v1.IOperationMetadata>, protosTypes.google.longrunning.IOperation | undefined, {} | undefined]>;
    asyncBatchAnnotateFiles(request: protosTypes.google.cloud.vision.v1.IAsyncBatchAnnotateFilesRequest, options: gax.CallOptions, callback: Callback<LROperation<protosTypes.google.cloud.vision.v1.IAsyncBatchAnnotateFilesResponse, protosTypes.google.cloud.vision.v1.IOperationMetadata>, protosTypes.google.longrunning.IOperation | undefined, {} | undefined>): void;
    /**
     * Return a fully-qualified product resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} product
     * @returns {string} Resource name string.
     */
    productPath(project: string, location: string, product: string): string;
    /**
     * Parse the project from Product resource.
     *
     * @param {string} productName
     *   A fully-qualified path representing Product resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProductName(productName: string): string;
    /**
     * Parse the location from Product resource.
     *
     * @param {string} productName
     *   A fully-qualified path representing Product resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProductName(productName: string): string;
    /**
     * Parse the product from Product resource.
     *
     * @param {string} productName
     *   A fully-qualified path representing Product resource.
     * @returns {string} A string representing the product.
     */
    matchProductFromProductName(productName: string): string;
    /**
     * Return a fully-qualified productSet resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} product_set
     * @returns {string} Resource name string.
     */
    productSetPath(project: string, location: string, productSet: string): string;
    /**
     * Parse the project from ProductSet resource.
     *
     * @param {string} productSetName
     *   A fully-qualified path representing ProductSet resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProductSetName(productSetName: string): string;
    /**
     * Parse the location from ProductSet resource.
     *
     * @param {string} productSetName
     *   A fully-qualified path representing ProductSet resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProductSetName(productSetName: string): string;
    /**
     * Parse the product_set from ProductSet resource.
     *
     * @param {string} productSetName
     *   A fully-qualified path representing ProductSet resource.
     * @returns {string} A string representing the product_set.
     */
    matchProductSetFromProductSetName(productSetName: string): string;
    /**
     * Return a fully-qualified referenceImage resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} product
     * @param {string} reference_image
     * @returns {string} Resource name string.
     */
    referenceImagePath(project: string, location: string, product: string, referenceImage: string): string;
    /**
     * Parse the project from ReferenceImage resource.
     *
     * @param {string} referenceImageName
     *   A fully-qualified path representing ReferenceImage resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromReferenceImageName(referenceImageName: string): string;
    /**
     * Parse the location from ReferenceImage resource.
     *
     * @param {string} referenceImageName
     *   A fully-qualified path representing ReferenceImage resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromReferenceImageName(referenceImageName: string): string;
    /**
     * Parse the product from ReferenceImage resource.
     *
     * @param {string} referenceImageName
     *   A fully-qualified path representing ReferenceImage resource.
     * @returns {string} A string representing the product.
     */
    matchProductFromReferenceImageName(referenceImageName: string): string;
    /**
     * Parse the reference_image from ReferenceImage resource.
     *
     * @param {string} referenceImageName
     *   A fully-qualified path representing ReferenceImage resource.
     * @returns {string} A string representing the reference_image.
     */
    matchReferenceImageFromReferenceImageName(referenceImageName: string): string;
    /**
     * Terminate the GRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     */
    close(): Promise<void>;
}
import { FeaturesMethod } from '../helpers';
export interface ImageAnnotatorClient extends FeaturesMethod {
}
